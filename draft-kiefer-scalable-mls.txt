



Network Working Group                                          F. Kiefer
Internet-Draft                                              K. Bhargavan
Intended status: Informational                                   Cryspen
Expires: 16 February 2024                                 15 August 2023


                              Scalable MLS
                    draft-kiefer-scalable-mls-latest

Abstract

   This document describes a scalable variant of the MLS protocol.

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://example.com/LATEST.  Status information for this document may
   be found at https://datatracker.ietf.org/doc/draft-kiefer-scalable-
   mls/.

   Discussion of this document takes place on the WG Working Group
   mailing list (mailto:WG@example.com), which is archived at
   https://example.com/WG.

   Source for this draft and an issue tracker can be found at
   https://github.com/USER/REPO.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 16 February 2024.

Copyright Notice

   Copyright (c) 2023 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  Expandable Tree
     3.1.  Verifying Tree Validity
       3.1.1.  Joining a Group via Welcome Message
       3.1.2.  Commit
     3.2.  Proof of Membership
     3.3.  Verifying Expandable Trees
     3.4.  Retrieving Expandable Tree Information
       3.4.1.  Expandable Tree from the Deliver Service
       3.4.2.  Expandable Tree from the Sender
     3.5.  Expandable Tree
     3.6.  Committing with an expandable Tree
       3.6.1.  Maintaining state
   4.  Receiver specific Commits
     4.1.  Applying receiver specific commits
   5.  Security Considerations
     5.1.  Comparison with RFC MLS
   6.  IANA Considerations
   7.  Normative References
   Acknowledgments
   Authors' Addresses

1.  Introduction

   This draft defines two modifications to the main MLS protocol in
   [RFC9420].

   First, it defines expandable trees in Section Section 3 that allow
   retrieving and storing only the minimally required tree information
   to participate in an MLS group.  An expandable tree can always be
   completed to a full MLS tree as described in Section Section 3.6.

   Secondly, it defines receiver specific commits in Section Section 4
   that reduce the data downloaded by clients for processing commits.

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  Expandable Tree

   An expandable tree is a modified ratchet tree as described in
   [RFC9420].  An expandable tree stores only the direct path from the
   member to the root plus additional information about the co-path.

   In particular, a list of Hashes are stored for the member's co-path,
   containing the node's index, it's tree hash as computed on the full
   tree, and the original tree hash as computed on the full tree (recall
   that the original tree hash is the node's tree hash excluding any
   unmerged leaves).

   struct {
     uint32 index;
     opaque tree_hash<V>;
     opaque original_tree_hash<V>;
   } Hashes;

   TODO: Add tree pictures examples for explanation

             R
            /
           P
         __|__
        /     \
       D       S
      / \     / \
    ... ... ... ...
    /
   L

                         Figure 1: Expandable tree

3.1.  Verifying Tree Validity

   A client that has an expandable tree can not do all the checks that a
   client with the full tree can do.  We therefore update the checks
   performed on tree modifications.  In particular the validation of
   commits and welcome packages are modified compared to [RFC9420].

3.1.1.  Joining a Group via Welcome Message

   When a new member joins the group with a Welcome message
   (Section 12.4.3.1.  [RFC9420]) without the ratchet tree extension the
   checks are updated as follows.

   1.  Verify the GroupInfo

       1.  signature

       2.  confirmation tag

       3.  tree hash

   2.  Verify the sender's membership (see Section 3.2).

   3.  Check the own direct path to the root (see Section 3.3).

   4.  Do _not_ verify leaves in the tree.

3.1.2.  Commit

   When a member receives a Commit message (Section 12.4.2.  [RFC9420])
   the checks are updated as follows.

   1.  Verify the sender's membership (see Section 3.2).

   2.  If the own path changed, check it.

3.2.  Proof of Membership

   To verify the group membership of the sender of a commit, the
   receiver with an expandable tree checks the sender's leaf (see
   Section 7.3 [RFC9420]), as well as the correctness of the tree as
   described in Section 3.3.

3.3.  Verifying Expandable Trees

   To verify the correctness of an expandable tree the client checks its
   tree hash and parent hashes.  For each direct path from a leaf to the
   root that the client has, it checks the parent hash value on each
   node by using original_tree_hash of the co-path nodes.  The tree hash
   on the root node is computed similarly, using the tree_hash values
   for all nodes where the client does not have the full nodes.

   Check that the encryption keys of all received nodes are unique.

3.4.  Retrieving Expandable Tree Information

   The ExpandableTree is provided by the delivery service to the client
   on request.  Alternatively, a client can send the ExpandableTree as
   extension in Welcome messages.  See Section 3 for details on the
   expandable tree extension.

3.4.1.  Expandable Tree from the Deliver Service

   In particular, when joining a group, after receiving a Welcome
   message, the client queries the delivery service for the expandable
   tree.  The delivery service must keep track of the group's state
   (tree) and assemble the ExpandableTree when requested for a given
   sender and receiver.

   When receiving a Commit message, the client queries the delivery
   service for the sender's direct path to check its membership.

3.4.2.  Expandable Tree from the Sender

   When the delivery service does not provide the necessary endpoints to
   query the expandable trees, the sender can include it into the
   GroupInfo extensions in the Welcome message.

3.5.  Expandable Tree

   enum {
     reserved(0),
     xnode(1),
     hashes(2),
     (255)
   } XNodeType;

   struct {
     uint32: index;
     optional<Node> node;
   } XNode;

   struct {
     XNodeType node_type;
     select (XNode.node_typ) {
       case xnode:  XNode xnode;
       case hashes: Hashes hashes;
     }
   } ExpandableNode;

   struct {
     ExpandableNode nodes<V>;
     uint32 num_nodes;
   } ExpandableTree;

3.6.  Committing with an expandable Tree

   A client with an expandable _can not commit_ because it doesn't know
   the necessary public keys in the tree to encrypt to.  Therefore, if a
   client with an expandable tree wants to commit, it first has to
   retrieve the full tree from the server.  Because a client with an
   expandable tree is not able to fully verify incoming proposals, it
   MUST NOT commit to proposals it received while not holding a full
   tree.  A client that is upgrading from expandable trees to a full MLS
   tree is therefore considered to be a new client that has no knowledge
   of proposals before it joined.  Note that this restriction can not be
   enforced.  However, since each client in [RFC9420] must check the
   proposals, a misbehaving client that upgraded from an expandable tree
   can only successfully commit bogus proposals when all other clients
   and the delivery service agree.

   A client that is upgrading to the full tree by requesting the full
   tree of the current epoch from the server.  In order ensure that the
   tree is the expanded version of the expandable tree known to the
   client, the client MUST perform the following checks:

   *  Verify that the tree hash of the expandable tree and the full tree
      are equivalent.

   *  Verify that all full nodes (XNode) in the expandable tree are
      equivalent to the corresponding node in the full tree.

   *  Perform all checks on the tree as if joining the group with a
      Welcome message (see Section 12.4.3.1. in [RFC9420]).

   To retrieve the full tree, the delivery service must provide an end
   point, equivalent to the one used to retrieve the full tree for a new
   member that wants to join with a commit.

3.6.1.  Maintaining state

   After committing, the client can decide to switch to regular MLS and
   process the full tree as described in [RFC9420].  This will cause the
   client's performance to regress to the performance of regular MLS,
   but allows it to commit again without the necessity to download the
   full tree again.

   If the client does not expect to commit regularly, only the
   expandable tree should be kept after a commit.

4.  Receiver specific Commits

   To reduce the size of Commit messages, especially in large, sparse
   trees, the delivery service can strip unnecessary parts of the Commit
   when using the public message type for MLSMessage and the sender type
   is member.

   The structure of the message stays the same but the server removes
   all HPKECiphertext from the encrypted_path_secret in the commit's
   UpdatePath, if present, where the encryption_key does not match the
   receiver's encryption key.

   This breaks the signature on the FramedContent such that this MUST
   NOT be checked by the receiver of such a commit.

   The delivery service sends an expandable commit XCommit message that
   is defined as follows.

   A new content type xcommit(4) is defined for FramedContent.

   struct {
     ExpandableNode nodes<V>;
   } XPath;

   struct {
     ProposalOrRef proposal<V>;
     optional<UpdatePath> path;
     optional<XPath> sender_path;
   } XCommit;

   Similar to checking expandable trees (Section 3.3) the receiver of an
   XCommit MUST verify the parent hash value on each node by using
   original_tree_hash of the co-path nodes, and the tree hash of the new
   tree.

4.1.  Applying receiver specific commits

   When receiving an XCommit, the client applies it like a regular
   commit.

   Additionally, the client checks the membership of the committer as
   described in Section 3.2 using the sender_path.

5.  Security Considerations

   TODO Security

   *  public keys only used when committing, at this point we have the
      full tree

   *  own path secrets

   *  proposal validation issues

      -  can't check double join

   *  commits are using only the confirmation tag for the security

      -  group context is not signed -> but it was only used to bind the
         signature to an epoch, which is done by the confirmation tag as
         well

      -  other than that the confirmation tag covers everything relevant
         (except for WireFormat and ProtocolVersion)

      -  proof of membership (Section 3.2) ensures that the sender is in
         the correct subtree

5.1.  Comparison with RFC MLS

   The main change compared to the protocol as specified in [RFC9420] is
   that the receiver of a Welcome or Commit message, with an expandable
   tree, can not perform all checks as mandated in [RFC9420].

   In particular the following checks are omitted.

   *  Check for uniqueness of all encryption and signature keys.
      Because not all keys are known, the check can only be performed on
      the known keys.

   *  Check validity of leaf nodes in the tree when joining a group.

   When using receiver specific commits the following checks are omitted
   in addition.

   *  Check the signature on the FramedContent.

6.  IANA Considerations

   This document has no IANA actions.

7.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC9420]  Barnes, R., Beurdouche, B., Robert, R., Millican, J.,
              Omara, E., and K. Cohn-Gordon, "The Messaging Layer
              Security (MLS) Protocol", RFC 9420, DOI 10.17487/RFC9420,
              July 2023, <https://www.rfc-editor.org/rfc/rfc9420>.

Acknowledgments

   TODO acknowledge.

Authors' Addresses

   Franziskus Kiefer
   Cryspen
   Email: franziskuskiefer@gmail.com


   Karthikeyan Bhargavan
   Cryspen
   Email: karthik.bhargavan@gmail.com
